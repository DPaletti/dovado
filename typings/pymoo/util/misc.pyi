"""
This type stub file was generated by pyright.
"""

def parameter_less(F, CV):
    ...

def swap(M, a, b):
    ...

def repair(X, xl, xu):
    ...

def unique_rows(a):
    ...

def parameter_less_constraints(F, CV, F_max=...):
    ...

def random_permuations(n, l):
    ...

def get_duplicates(M):
    ...

def euclidean_distance(a, b):
    ...

def norm_euclidean_distance(problem):
    ...

def cdist(A, B, **kwargs):
    ...

def vectorized_cdist(A, B, func_dist=..., fill_diag_with_inf=..., **kwargs):
    ...

def norm_eucl_dist(problem, A, B, **kwargs):
    ...

def covert_to_type(problem, X):
    ...

def find_duplicates(X, epsilon=...):
    ...

def at_least_2d_array(x, extend_as=...):
    ...

def to_1d_array_if_possible(x):
    ...

def stack(*args, flatten=...):
    ...

def all_except(x, *args):
    ...

def all_combinations(A, B):
    ...

def pop_from_sampling(problem, sampling, n_initial_samples, pop=...):
    ...

def evaluate_if_not_done_yet(evaluator, problem, pop, algorithm=...):
    ...

def set_if_none(kwargs, str, val):
    ...

def set_if_none_from_tuples(kwargs, *args):
    ...

def calc_perpendicular_distance(N, ref_dirs):
    ...

def distance_of_closest_points_to_others(X):
    ...

def time_to_int(t):
    ...

def powerset(iterable):
    ...

def intersect(a, b):
    ...

def has_feasible(pop):
    ...

def to_numpy(a):
    ...

def termination_from_tuple(termination):
    ...

