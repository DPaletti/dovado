"""
This type stub file was generated by pyright.
"""

from pymoo.algorithms.so_local_search import LocalSearch
from pymoo.model.termination import Termination

class NelderAndMeadTermination2(Termination):
    def __init__(self, **kwargs) -> None:
        ...
    


class NelderAndMeadTermination(Termination):
    def __init__(self, x_tol=..., f_tol=..., n_max_iter=..., n_max_evals=...) -> None:
        ...
    


def adaptive_params(problem):
    ...

class NelderMead(LocalSearch):
    def __init__(self, func_params=..., display=..., **kwargs) -> None:
        """

        Parameters
        ----------
        X : np.array or Population
            The initial point where the search should be based on or the complete initial simplex (number of
            dimensions plus 1 points). The population objective can be already evaluated with objective
            space values. If a numpy array is provided it is evaluated by the algorithm.
            By default it is None which means the search starts at a random point.

        func_params : func
            A function that returns the parameters alpha, beta, gamma, delta for the search. By default:

            >>>  def adaptive_params(problem):
            ...     n = problem.n_var
            ...
            ...     alpha = 1
            ...     beta = 1 + 2 / n
            ...     gamma = 0.75 - 1 / (2 * n)
            ...     delta = 1 - 1 / n
            ...     return alpha, beta, gamma, delta

            It can be overwritten if necessary.


        criterion_local_restart : Termination
            Provide a termination object which decides whether a local restart should be performed or not.

        """
        ...
    
    def initialize_simplex(self, x0):
        ...
    


def max_expansion_factor(point, direction, xl, xu):
    ...

def default_params(*args):
    ...

