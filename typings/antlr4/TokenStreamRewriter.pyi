"""
This type stub file was generated by pyright.
"""

class TokenStreamRewriter(object):
    DEFAULT_PROGRAM_NAME = ...
    PROGRAM_INIT_SIZE = ...
    MIN_TOKEN_INDEX = ...
    def __init__(self, tokens) -> None:
        """
        :type  tokens: antlr4.BufferedTokenStream.BufferedTokenStream
        :param tokens:
        :return:
        """
        ...
    
    def getTokenStream(self):
        ...
    
    def rollback(self, instruction_index, program_name):
        ...
    
    def deleteProgram(self, program_name=...):
        ...
    
    def insertAfterToken(self, token, text, program_name=...):
        ...
    
    def insertAfter(self, index, text, program_name=...):
        ...
    
    def insertBeforeIndex(self, index, text):
        ...
    
    def insertBeforeToken(self, token, text, program_name=...):
        ...
    
    def insertBefore(self, program_name, index, text):
        ...
    
    def replaceIndex(self, index, text):
        ...
    
    def replaceRange(self, from_idx, to_idx, text):
        ...
    
    def replaceSingleToken(self, token, text):
        ...
    
    def replaceRangeTokens(self, from_token, to_token, text, program_name=...):
        ...
    
    def replace(self, program_name, from_idx, to_idx, text):
        ...
    
    def deleteToken(self, token):
        ...
    
    def deleteIndex(self, index):
        ...
    
    def delete(self, program_name, from_idx, to_idx):
        ...
    
    def lastRewriteTokenIndex(self, program_name=...):
        ...
    
    def setLastRewriteTokenIndex(self, program_name, i):
        ...
    
    def getProgram(self, program_name):
        ...
    
    def getDefaultText(self):
        ...
    
    def getText(self, program_name, start: int, stop: int):
        """
        :return: the text in tokens[start, stop](closed interval)
        """
        ...
    
    class RewriteOperation(object):
        def __init__(self, tokens, index, text=...) -> None:
            """
            :type tokens: CommonTokenStream
            :param tokens:
            :param index:
            :param text:
            :return:
            """
            ...
        
        def execute(self, buf):
            """
            :type buf: StringIO.StringIO
            :param buf:
            :return:
            """
            ...
        
        def __str__(self) -> str:
            ...
        
    
    
    class InsertBeforeOp(RewriteOperation):
        def __init__(self, tokens, index, text=...) -> None:
            ...
        
        def execute(self, buf):
            ...
        
    
    
    class InsertAfterOp(InsertBeforeOp):
        ...
    
    
    class ReplaceOp(RewriteOperation):
        def __init__(self, from_idx, to_idx, tokens, text) -> None:
            ...
        
        def execute(self, buf):
            ...
        
        def __str__(self) -> str:
            ...
        
    
    


