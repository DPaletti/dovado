"""
This type stub file was generated by pyright.
"""

from antlr4.Token import Token

INVALID_INTERVAL = (- 1, - 2)
class Tree(object):
    ...


class SyntaxTree(Tree):
    ...


class ParseTree(SyntaxTree):
    ...


class RuleNode(ParseTree):
    ...


class TerminalNode(ParseTree):
    ...


class ErrorNode(TerminalNode):
    ...


class ParseTreeVisitor(object):
    def visit(self, tree):
        ...
    
    def visitChildren(self, node):
        ...
    
    def visitTerminal(self, node):
        ...
    
    def visitErrorNode(self, node):
        ...
    
    def defaultResult(self):
        ...
    
    def aggregateResult(self, aggregate, nextResult):
        ...
    
    def shouldVisitNextChild(self, node, currentResult):
        ...
    


ParserRuleContext = None
class ParseTreeListener(object):
    def visitTerminal(self, node: TerminalNode):
        ...
    
    def visitErrorNode(self, node: ErrorNode):
        ...
    
    def enterEveryRule(self, ctx: ParserRuleContext):
        ...
    
    def exitEveryRule(self, ctx: ParserRuleContext):
        ...
    


class TerminalNodeImpl(TerminalNode):
    def __init__(self, symbol: Token) -> None:
        ...
    
    def __setattr__(self, key, value):
        ...
    
    def getChild(self, i: int):
        ...
    
    def getSymbol(self):
        ...
    
    def getParent(self):
        ...
    
    def getPayload(self):
        ...
    
    def getSourceInterval(self):
        ...
    
    def getChildCount(self):
        ...
    
    def accept(self, visitor: ParseTreeVisitor):
        ...
    
    def getText(self):
        ...
    
    def __str__(self) -> str:
        ...
    


class ErrorNodeImpl(TerminalNodeImpl, ErrorNode):
    def __init__(self, token: Token) -> None:
        ...
    
    def accept(self, visitor: ParseTreeVisitor):
        ...
    


class ParseTreeWalker(object):
    DEFAULT = ...
    def walk(self, listener: ParseTreeListener, t: ParseTree):
        """
	    Performs a walk on the given parse tree starting at the root and going down recursively
	    with depth-first search. On each node, {@link ParseTreeWalker#enterRule} is called before
	    recursively walking down into child nodes, then
	    {@link ParseTreeWalker#exitRule} is called after the recursive call to wind up.
	    @param listener The listener used by the walker to process grammar rules
	    @param t The parse tree to be walked on
        """
        ...
    
    def enterRule(self, listener: ParseTreeListener, r: RuleNode):
        """
	    Enters a grammar rule by first triggering the generic event {@link ParseTreeListener#enterEveryRule}
	    then by triggering the event specific to the given parse tree node
	    @param listener The listener responding to the trigger events
	    @param r The grammar rule containing the rule context
        """
        ...
    
    def exitRule(self, listener: ParseTreeListener, r: RuleNode):
        """
	    Exits a grammar rule by first triggering the event specific to the given parse tree node
	    then by triggering the generic event {@link ParseTreeListener#exitEveryRule}
	    @param listener The listener responding to the trigger events
	    @param r The grammar rule containing the rule context
        """
        ...
    


