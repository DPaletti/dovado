"""
This type stub file was generated by pyright.
"""

from antlr4.RuleContext import RuleContext
from antlr4.atn.ATN import ATN

class PredictionContext(object):
    EMPTY = ...
    EMPTY_RETURN_STATE = ...
    globalNodeCount = ...
    id = ...
    def __init__(self, cachedHashCode: int) -> None:
        ...
    
    def __len__(self):
        ...
    
    def isEmpty(self):
        ...
    
    def hasEmptyPath(self):
        ...
    
    def getReturnState(self, index: int):
        ...
    
    def __hash__(self) -> int:
        ...
    


def calculateHashCode(parent: PredictionContext, returnState: int):
    ...

def calculateListsHashCode(parents: [], returnStates: []):
    ...

class PredictionContextCache(object):
    def __init__(self) -> None:
        ...
    
    def add(self, ctx: PredictionContext):
        ...
    
    def get(self, ctx: PredictionContext):
        ...
    
    def __len__(self):
        ...
    


class SingletonPredictionContext(PredictionContext):
    @staticmethod
    def create(parent: PredictionContext, returnState: int):
        ...
    
    def __init__(self, parent: PredictionContext, returnState: int) -> None:
        ...
    
    def __len__(self):
        ...
    
    def getParent(self, index: int):
        ...
    
    def getReturnState(self, index: int):
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __str__(self) -> str:
        ...
    


class EmptyPredictionContext(SingletonPredictionContext):
    def __init__(self) -> None:
        ...
    
    def isEmpty(self):
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __str__(self) -> str:
        ...
    


class ArrayPredictionContext(PredictionContext):
    def __init__(self, parents: list, returnStates: list) -> None:
        ...
    
    def isEmpty(self):
        ...
    
    def __len__(self):
        ...
    
    def getParent(self, index: int):
        ...
    
    def getReturnState(self, index: int):
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __hash__(self) -> int:
        ...
    


def PredictionContextFromRuleContext(atn: ATN, outerContext: RuleContext = ...):
    ...

def merge(a: PredictionContext, b: PredictionContext, rootIsWildcard: bool, mergeCache: dict):
    ...

def mergeSingletons(a: SingletonPredictionContext, b: SingletonPredictionContext, rootIsWildcard: bool, mergeCache: dict):
    ...

def mergeRoot(a: SingletonPredictionContext, b: SingletonPredictionContext, rootIsWildcard: bool):
    ...

def mergeArrays(a: ArrayPredictionContext, b: ArrayPredictionContext, rootIsWildcard: bool, mergeCache: dict):
    ...

def combineCommonParents(parents: list):
    ...

def getCachedPredictionContext(context: PredictionContext, contextCache: PredictionContextCache, visited: dict):
    ...

def getAllContextNodes(context: PredictionContext, nodes: list = ..., visited: dict = ...):
    ...

