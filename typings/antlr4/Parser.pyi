"""
This type stub file was generated by pyright.
"""

import sys
from typing import TextIO
from typing.io import TextIO
from antlr4.BufferedTokenStream import TokenStream
from antlr4.CommonTokenFactory import TokenFactory
from antlr4.InputStream import InputStream
from antlr4.Recognizer import Recognizer
from antlr4.RuleContext import RuleContext
from antlr4.ParserRuleContext import ParserRuleContext
from antlr4.Token import Token
from antlr4.Lexer import Lexer
from antlr4.error.Errors import RecognitionException
from antlr4.tree.Tree import ParseTreeListener

if sys.version_info[1] > 5:
    ...
else:
    ...
class TraceListener(ParseTreeListener):
    def __init__(self, parser) -> None:
        ...
    
    def enterEveryRule(self, ctx):
        ...
    
    def visitTerminal(self, node):
        ...
    
    def visitErrorNode(self, node):
        ...
    
    def exitEveryRule(self, ctx):
        ...
    


class Parser(Recognizer):
    bypassAltsAtnCache = ...
    def __init__(self, input: TokenStream, output: TextIO = ...) -> None:
        ...
    
    def reset(self):
        ...
    
    def match(self, ttype: int):
        ...
    
    def matchWildcard(self):
        ...
    
    def getParseListeners(self):
        ...
    
    def addParseListener(self, listener: ParseTreeListener):
        ...
    
    def removeParseListener(self, listener: ParseTreeListener):
        ...
    
    def removeParseListeners(self):
        ...
    
    def triggerEnterRuleEvent(self):
        ...
    
    def triggerExitRuleEvent(self):
        ...
    
    def getNumberOfSyntaxErrors(self):
        ...
    
    def getTokenFactory(self):
        ...
    
    def setTokenFactory(self, factory: TokenFactory):
        ...
    
    def getATNWithBypassAlts(self):
        ...
    
    def compileParseTreePattern(self, pattern: str, patternRuleIndex: int, lexer: Lexer = ...):
        ...
    
    def getInputStream(self):
        ...
    
    def setInputStream(self, input: InputStream):
        ...
    
    def getTokenStream(self):
        ...
    
    def setTokenStream(self, input: TokenStream):
        ...
    
    def getCurrentToken(self):
        ...
    
    def notifyErrorListeners(self, msg: str, offendingToken: Token = ..., e: RecognitionException = ...):
        ...
    
    def consume(self):
        ...
    
    def addContextToParseTree(self):
        ...
    
    def enterRule(self, localctx: ParserRuleContext, state: int, ruleIndex: int):
        ...
    
    def exitRule(self):
        ...
    
    def enterOuterAlt(self, localctx: ParserRuleContext, altNum: int):
        ...
    
    def getPrecedence(self):
        ...
    
    def enterRecursionRule(self, localctx: ParserRuleContext, state: int, ruleIndex: int, precedence: int):
        ...
    
    def pushNewRecursionContext(self, localctx: ParserRuleContext, state: int, ruleIndex: int):
        ...
    
    def unrollRecursionContexts(self, parentCtx: ParserRuleContext):
        ...
    
    def getInvokingContext(self, ruleIndex: int):
        ...
    
    def precpred(self, localctx: RuleContext, precedence: int):
        ...
    
    def inContext(self, context: str):
        ...
    
    def isExpectedToken(self, symbol: int):
        ...
    
    def getExpectedTokens(self):
        ...
    
    def getExpectedTokensWithinCurrentRule(self):
        ...
    
    def getRuleIndex(self, ruleName: str):
        ...
    
    def getRuleInvocationStack(self, p: RuleContext = ...):
        ...
    
    def getDFAStrings(self):
        ...
    
    def dumpDFA(self):
        ...
    
    def getSourceName(self):
        ...
    
    def setTrace(self, trace: bool):
        ...
    


