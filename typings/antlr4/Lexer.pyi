"""
This type stub file was generated by pyright.
"""

import sys
from typing import TextIO
from typing.io import TextIO
from antlr4.InputStream import InputStream
from antlr4.Recognizer import Recognizer
from antlr4.Token import Token
from antlr4.error.Errors import LexerNoViableAltException, RecognitionException

if sys.version_info[1] > 5:
    ...
else:
    ...
class TokenSource(object):
    ...


class Lexer(Recognizer, TokenSource):
    DEFAULT_MODE = ...
    MORE = ...
    SKIP = ...
    DEFAULT_TOKEN_CHANNEL = ...
    HIDDEN = ...
    MIN_CHAR_VALUE = ...
    MAX_CHAR_VALUE = ...
    def __init__(self, input: InputStream, output: TextIO = ...) -> None:
        ...
    
    def reset(self):
        ...
    
    def nextToken(self):
        ...
    
    def skip(self):
        ...
    
    def more(self):
        ...
    
    def mode(self, m: int):
        ...
    
    def pushMode(self, m: int):
        ...
    
    def popMode(self):
        ...
    
    @property
    def inputStream(self):
        ...
    
    @inputStream.setter
    def inputStream(self, input: InputStream):
        ...
    
    @property
    def sourceName(self):
        ...
    
    def emitToken(self, token: Token):
        ...
    
    def emit(self):
        ...
    
    def emitEOF(self):
        ...
    
    @property
    def type(self):
        ...
    
    @type.setter
    def type(self, type: int):
        ...
    
    @property
    def line(self):
        ...
    
    @line.setter
    def line(self, line: int):
        ...
    
    @property
    def column(self):
        ...
    
    @column.setter
    def column(self, column: int):
        ...
    
    def getCharIndex(self):
        ...
    
    @property
    def text(self):
        ...
    
    @text.setter
    def text(self, txt: str):
        ...
    
    def getAllTokens(self):
        ...
    
    def notifyListeners(self, e: LexerNoViableAltException):
        ...
    
    def getErrorDisplay(self, s: str):
        ...
    
    def getErrorDisplayForChar(self, c: str):
        ...
    
    def getCharErrorDisplay(self, c: str):
        ...
    
    def recover(self, re: RecognitionException):
        ...
    


