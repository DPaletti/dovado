"""
This type stub file was generated by pyright.
"""

from antlr4.PredictionContext import PredictionContextCache
from antlr4.InputStream import InputStream
from antlr4.atn.ATN import ATN
from antlr4.atn.ATNConfig import LexerATNConfig
from antlr4.atn.ATNSimulator import ATNSimulator
from antlr4.atn.ATNConfigSet import ATNConfigSet
from antlr4.atn.ATNState import ATNState
from antlr4.atn.LexerActionExecutor import LexerActionExecutor
from antlr4.atn.Transition import Transition
from antlr4.dfa.DFAState import DFAState

class SimState(object):
    def __init__(self) -> None:
        ...
    
    def reset(self):
        ...
    


Lexer = None
LexerATNSimulator = None
class LexerATNSimulator(ATNSimulator):
    debug = ...
    dfa_debug = ...
    MIN_DFA_EDGE = ...
    MAX_DFA_EDGE = ...
    ERROR = ...
    match_calls = ...
    def __init__(self, recog: Lexer, atn: ATN, decisionToDFA: list, sharedContextCache: PredictionContextCache) -> None:
        ...
    
    def copyState(self, simulator: LexerATNSimulator):
        ...
    
    def match(self, input: InputStream, mode: int):
        ...
    
    def reset(self):
        ...
    
    def matchATN(self, input: InputStream):
        ...
    
    def execATN(self, input: InputStream, ds0: DFAState):
        ...
    
    def getExistingTargetState(self, s: DFAState, t: int):
        ...
    
    def computeTargetState(self, input: InputStream, s: DFAState, t: int):
        ...
    
    def failOrAccept(self, prevAccept: SimState, input: InputStream, reach: ATNConfigSet, t: int):
        ...
    
    def getReachableConfigSet(self, input: InputStream, closure: ATNConfigSet, reach: ATNConfigSet, t: int):
        ...
    
    def accept(self, input: InputStream, lexerActionExecutor: LexerActionExecutor, startIndex: int, index: int, line: int, charPos: int):
        ...
    
    def getReachableTarget(self, trans: Transition, t: int):
        ...
    
    def computeStartState(self, input: InputStream, p: ATNState):
        ...
    
    def closure(self, input: InputStream, config: LexerATNConfig, configs: ATNConfigSet, currentAltReachedAcceptState: bool, speculative: bool, treatEofAsEpsilon: bool):
        ...
    
    def getEpsilonTarget(self, input: InputStream, config: LexerATNConfig, t: Transition, configs: ATNConfigSet, speculative: bool, treatEofAsEpsilon: bool):
        ...
    
    def evaluatePredicate(self, input: InputStream, ruleIndex: int, predIndex: int, speculative: bool):
        ...
    
    def captureSimState(self, settings: SimState, input: InputStream, dfaState: DFAState):
        ...
    
    def addDFAEdge(self, from_: DFAState, tk: int, to: DFAState = ..., cfgs: ATNConfigSet = ...) -> DFAState:
        ...
    
    def addDFAState(self, configs: ATNConfigSet) -> DFAState:
        ...
    
    def getDFA(self, mode: int):
        ...
    
    def getText(self, input: InputStream):
        ...
    
    def consume(self, input: InputStream):
        ...
    
    def getTokenName(self, t: int):
        ...
    


