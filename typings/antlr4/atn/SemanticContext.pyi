"""
This type stub file was generated by pyright.
"""

from antlr4.Recognizer import Recognizer
from antlr4.RuleContext import RuleContext

class SemanticContext(object):
    NONE = ...
    def eval(self, parser: Recognizer, outerContext: RuleContext):
        ...
    
    def evalPrecedence(self, parser: Recognizer, outerContext: RuleContext):
        ...
    


AND = None
def andContext(a: SemanticContext, b: SemanticContext):
    ...

OR = None
def orContext(a: SemanticContext, b: SemanticContext):
    ...

def filterPrecedencePredicates(collection: set):
    ...

class Predicate(SemanticContext):
    def __init__(self, ruleIndex: int = ..., predIndex: int = ..., isCtxDependent: bool = ...) -> None:
        ...
    
    def eval(self, parser: Recognizer, outerContext: RuleContext):
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    


class PrecedencePredicate(SemanticContext):
    def __init__(self, precedence: int = ...) -> None:
        ...
    
    def eval(self, parser: Recognizer, outerContext: RuleContext):
        ...
    
    def evalPrecedence(self, parser: Recognizer, outerContext: RuleContext):
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class AND(SemanticContext):
    def __init__(self, a: SemanticContext, b: SemanticContext) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def eval(self, parser: Recognizer, outerContext: RuleContext):
        ...
    
    def evalPrecedence(self, parser: Recognizer, outerContext: RuleContext):
        ...
    
    def __str__(self) -> str:
        ...
    


class OR(SemanticContext):
    def __init__(self, a: SemanticContext, b: SemanticContext) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def eval(self, parser: Recognizer, outerContext: RuleContext):
        ...
    
    def evalPrecedence(self, parser: Recognizer, outerContext: RuleContext):
        ...
    
    def __str__(self) -> str:
        ...
    


