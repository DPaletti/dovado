"""
This type stub file was generated by pyright.
"""

from uuid import UUID
from typing import Callable
from antlr4.atn.ATN import ATN
from antlr4.atn.ATNState import *
from antlr4.atn.Transition import *
from antlr4.atn.LexerAction import *
from antlr4.atn.ATNDeserializationOptions import ATNDeserializationOptions

BASE_SERIALIZED_UUID = UUID("AADB8D7E-AEEF-4415-AD2B-8204D6CF042E")
ADDED_UNICODE_SMP = UUID("59627784-3BE5-417A-B9EB-8131A7286089")
SUPPORTED_UUIDS = [BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP]
SERIALIZED_VERSION = 3
SERIALIZED_UUID = ADDED_UNICODE_SMP
class ATNDeserializer(object):
    def __init__(self, options: ATNDeserializationOptions = ...) -> None:
        ...
    
    def isFeatureSupported(self, feature: UUID, actualUuid: UUID):
        ...
    
    def deserialize(self, data: str):
        ...
    
    def reset(self, data: str):
        ...
    
    def checkVersion(self):
        ...
    
    def checkUUID(self):
        ...
    
    def readATN(self):
        ...
    
    def readStates(self, atn: ATN):
        ...
    
    def readRules(self, atn: ATN):
        ...
    
    def readModes(self, atn: ATN):
        ...
    
    def readSets(self, atn: ATN, sets: list, readUnicode: Callable[[], int]):
        ...
    
    def readEdges(self, atn: ATN, sets: list):
        ...
    
    def readDecisions(self, atn: ATN):
        ...
    
    def readLexerActions(self, atn: ATN):
        ...
    
    def generateRuleBypassTransitions(self, atn: ATN):
        ...
    
    def generateRuleBypassTransition(self, atn: ATN, idx: int):
        ...
    
    def stateIsEndStateFor(self, state: ATNState, idx: int):
        ...
    
    def markPrecedenceDecisions(self, atn: ATN):
        ...
    
    def verifyATN(self, atn: ATN):
        ...
    
    def checkCondition(self, condition: bool, message=...):
        ...
    
    def readInt(self):
        ...
    
    def readInt32(self):
        ...
    
    def readLong(self):
        ...
    
    def readUUID(self):
        ...
    
    edgeFactories = ...
    def edgeFactory(self, atn: ATN, type: int, src: int, trg: int, arg1: int, arg2: int, arg3: int, sets: list):
        ...
    
    stateFactories = ...
    def stateFactory(self, type: int, ruleIndex: int):
        ...
    
    CHANNEL = ...
    CUSTOM = ...
    MODE = ...
    MORE = ...
    POP_MODE = ...
    PUSH_MODE = ...
    SKIP = ...
    TYPE = ...
    actionFactories = ...
    def lexerActionFactory(self, type: int, data1: int, data2: int):
        ...
    


