"""
This type stub file was generated by pyright.
"""

from antlr4.IntervalSet import IntervalSet
from antlr4.atn.ATNState import *

ATNState = None
RuleStartState = None
class Transition(object):
    EPSILON = ...
    RANGE = ...
    RULE = ...
    PREDICATE = ...
    ATOM = ...
    ACTION = ...
    SET = ...
    NOT_SET = ...
    WILDCARD = ...
    PRECEDENCE = ...
    serializationNames = ...
    serializationTypes = ...
    def __init__(self, target: ATNState) -> None:
        ...
    


class AtomTransition(Transition):
    def __init__(self, target: ATNState, label: int) -> None:
        ...
    
    def makeLabel(self):
        ...
    
    def matches(self, symbol: int, minVocabSymbol: int, maxVocabSymbol: int):
        ...
    
    def __str__(self) -> str:
        ...
    


class RuleTransition(Transition):
    def __init__(self, ruleStart: RuleStartState, ruleIndex: int, precedence: int, followState: ATNState) -> None:
        ...
    
    def matches(self, symbol: int, minVocabSymbol: int, maxVocabSymbol: int):
        ...
    


class EpsilonTransition(Transition):
    def __init__(self, target, outermostPrecedenceReturn=...) -> None:
        ...
    
    def matches(self, symbol: int, minVocabSymbol: int, maxVocabSymbol: int):
        ...
    
    def __str__(self) -> str:
        ...
    


class RangeTransition(Transition):
    def __init__(self, target: ATNState, start: int, stop: int) -> None:
        ...
    
    def makeLabel(self):
        ...
    
    def matches(self, symbol: int, minVocabSymbol: int, maxVocabSymbol: int):
        ...
    
    def __str__(self) -> str:
        ...
    


class AbstractPredicateTransition(Transition):
    def __init__(self, target: ATNState) -> None:
        ...
    


class PredicateTransition(AbstractPredicateTransition):
    def __init__(self, target: ATNState, ruleIndex: int, predIndex: int, isCtxDependent: bool) -> None:
        ...
    
    def matches(self, symbol: int, minVocabSymbol: int, maxVocabSymbol: int):
        ...
    
    def getPredicate(self):
        ...
    
    def __str__(self) -> str:
        ...
    


class ActionTransition(Transition):
    def __init__(self, target: ATNState, ruleIndex: int, actionIndex: int = ..., isCtxDependent: bool = ...) -> None:
        ...
    
    def matches(self, symbol: int, minVocabSymbol: int, maxVocabSymbol: int):
        ...
    
    def __str__(self) -> str:
        ...
    


class SetTransition(Transition):
    def __init__(self, target: ATNState, set: IntervalSet) -> None:
        ...
    
    def matches(self, symbol: int, minVocabSymbol: int, maxVocabSymbol: int):
        ...
    
    def __str__(self) -> str:
        ...
    


class NotSetTransition(SetTransition):
    def __init__(self, target: ATNState, set: IntervalSet) -> None:
        ...
    
    def matches(self, symbol: int, minVocabSymbol: int, maxVocabSymbol: int):
        ...
    
    def __str__(self) -> str:
        ...
    


class WildcardTransition(Transition):
    def __init__(self, target: ATNState) -> None:
        ...
    
    def matches(self, symbol: int, minVocabSymbol: int, maxVocabSymbol: int):
        ...
    
    def __str__(self) -> str:
        ...
    


class PrecedencePredicateTransition(AbstractPredicateTransition):
    def __init__(self, target: ATNState, precedence: int) -> None:
        ...
    
    def matches(self, symbol: int, minVocabSymbol: int, maxVocabSymbol: int):
        ...
    
    def getPredicate(self):
        ...
    
    def __str__(self) -> str:
        ...
    


