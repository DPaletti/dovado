"""
This type stub file was generated by pyright.
"""

from statsmodels.compat.pandas import Substitution
from statsmodels.base.model import Model

"""General linear model

author: Yichuan Liu
"""
__docformat__ = 'restructuredtext en'
_hypotheses_doc = """hypotheses : list[tuple]
    Hypothesis `L*B*M = C` to be tested where B is the parameters in
    regression Y = X*B. Each element is a tuple of length 2, 3, or 4:

      * (name, contrast_L)
      * (name, contrast_L, transform_M)
      * (name, contrast_L, transform_M, constant_C)

    containing a string `name`, the contrast matrix L, the transform
    matrix M (for transforming dependent variables), and right-hand side
    constant matrix constant_C, respectively.

    contrast_L : 2D array or an array of strings
        Left-hand side contrast matrix for hypotheses testing.
        If 2D array, each row is an hypotheses and each column is an
        independent variable. At least 1 row
        (1 by k_exog, the number of independent variables) is required.
        If an array of strings, it will be passed to
        patsy.DesignInfo().linear_constraint.

    transform_M : 2D array or an array of strings or None, optional
        Left hand side transform matrix.
        If `None` or left out, it is set to a k_endog by k_endog
        identity matrix (i.e. do not transform y matrix).
        If an array of strings, it will be passed to
        patsy.DesignInfo().linear_constraint.

    constant_C : 2D array or None, optional
        Right-hand side constant matrix.
        if `None` or left out it is set to a matrix of zeros
        Must has the same number of rows as contrast_L and the same
        number of columns as transform_M

    If `hypotheses` is None: 1) the effect of each independent variable
    on the dependent variables will be tested. Or 2) if model is created
    using a formula,  `hypotheses` will be created according to
    `design_info`. 1) and 2) is equivalent if no additional variables
    are created by the formula (e.g. dummy variables for categorical
    variables and interaction terms)
"""
def multivariate_stats(eigenvals, r_err_sscp, r_contrast, df_resid, tolerance=...):
    """
    For multivariate linear model Y = X * B
    Testing hypotheses
        L*B*M = 0
    where L is contrast matrix, B is the parameters of the
    multivariate linear model and M is dependent variable transform matrix.
        T = L*inv(X'X)*L'
        H = M'B'L'*inv(T)*LBM
        E =  M'(Y'Y - B'X'XB)M

    Parameters
    ----------
    eigenvals : ndarray
        The eigenvalues of inv(E + H)*H
    r_err_sscp : int
        Rank of E + H
    r_contrast : int
        Rank of T matrix
    df_resid : int
        Residual degree of freedom (n_samples minus n_variables of X)
    tolerance : float
        smaller than which eigenvalue is considered 0

    Returns
    -------
    A DataFrame

    References
    ----------
    .. [*] https://support.sas.com/documentation/cdl/en/statug/63033/HTML/default/viewer.htm#statug_introreg_sect012.htm
    """
    ...

class _MultivariateOLS(Model):
    """
    Multivariate linear model via least squares


    Parameters
    ----------
    endog : array_like
        Dependent variables. A nobs x k_endog array where nobs is
        the number of observations and k_endog is the number of dependent
        variables
    exog : array_like
        Independent variables. A nobs x k_exog array where nobs is the
        number of observations and k_exog is the number of independent
        variables. An intercept is not included by default and should be added
        by the user (models specified using a formula include an intercept by
        default)

    Attributes
    ----------
    endog : ndarray
        See Parameters.
    exog : ndarray
        See Parameters.
    """
    _formula_max_endog = ...
    def __init__(self, endog, exog, missing=..., hasconst=..., **kwargs) -> None:
        ...
    
    def fit(self, method=...):
        ...
    


class _MultivariateOLSResults(object):
    """
    _MultivariateOLS results class
    """
    def __init__(self, fitted_mv_ols) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    @Substitution(hypotheses_doc=_hypotheses_doc)
    def mv_test(self, hypotheses=...):
        """
        Linear hypotheses testing

        Parameters
        ----------
        %(hypotheses_doc)s

        Returns
        -------
        results: _MultivariateOLSResults

        Notes
        -----
        Tests hypotheses of the form

            L * params * M = C

        where `params` is the regression coefficient matrix for the
        linear model y = x * params, `L` is the contrast matrix, `M` is the
        dependent variable transform matrix and C is the constant matrix.
        """
        ...
    
    def summary(self):
        ...
    


class MultivariateTestResults(object):
    """ Multivariate test results class
    Returned by `mv_test` method of `_MultivariateOLSResults` class

    Attributes
    ----------
    results : dict
       For hypothesis name `key`:
           results[key]['stat'] contains the multivariate test results
           results[key]['contrast_L'] contains the contrast_L matrix
           results[key]['transform_M'] contains the transform_M matrix
           results[key]['constant_C'] contains the constant_C matrix
    endog_names : str
    exog_names : str
    summary_frame : multiindex dataframe
        Returns results as a multiindex dataframe
    """
    def __init__(self, mv_test_df, endog_names, exog_names) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __getitem__(self, item):
        ...
    
    @property
    def summary_frame(self):
        """
        Return results as a multiindex dataframe
        """
        ...
    
    def summary(self, show_contrast_L=..., show_transform_M=..., show_constant_C=...):
        """

        Parameters
        ----------
        contrast_L : True or False
            Whether to show contrast_L matrix
        transform_M : True or False
            Whether to show transform_M matrix
        """
        ...
    


